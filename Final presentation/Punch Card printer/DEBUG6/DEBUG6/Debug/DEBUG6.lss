
DEBUG6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019b1  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b0  00000000  00000000  000021c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e9b  00000000  00000000  00002971  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  0000380c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cb  00000000  00000000  00003a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020d2  00000000  00000000  00003eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00005fbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <main>
  64:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_SetBaudRate>:
			UART_TxChar(ch);
		}
	}

	va_end(argp);
}
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	8b 01       	movw	r16, r22
  72:	9c 01       	movw	r18, r24
  74:	dc 01       	movw	r26, r24
  76:	cb 01       	movw	r24, r22
  78:	80 56       	subi	r24, 0x60	; 96
  7a:	99 40       	sbci	r25, 0x09	; 9
  7c:	a1 09       	sbc	r26, r1
  7e:	b1 09       	sbc	r27, r1
  80:	81 3a       	cpi	r24, 0xA1	; 161
  82:	98 4b       	sbci	r25, 0xB8	; 184
  84:	a1 40       	sbci	r26, 0x01	; 1
  86:	b1 05       	cpc	r27, r1
  88:	70 f5       	brcc	.+92     	; 0xe6 <UART_SetBaudRate+0x7a>
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	dc 01       	movw	r26, r24
  90:	80 1b       	sub	r24, r16
  92:	91 0b       	sbc	r25, r17
  94:	a2 0b       	sbc	r26, r18
  96:	b3 0b       	sbc	r27, r19
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	aa 1f       	adc	r26, r26
  9e:	bb 1f       	adc	r27, r27
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	aa 1f       	adc	r26, r26
  a6:	bb 1f       	adc	r27, r27
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	aa 1f       	adc	r26, r26
  ae:	bb 1f       	adc	r27, r27
  b0:	bc 01       	movw	r22, r24
  b2:	cd 01       	movw	r24, r26
  b4:	60 5c       	subi	r22, 0xC0	; 192
  b6:	7d 4b       	sbci	r23, 0xBD	; 189
  b8:	80 4f       	sbci	r24, 0xF0	; 240
  ba:	9f 4f       	sbci	r25, 0xFF	; 255
  bc:	00 0f       	add	r16, r16
  be:	11 1f       	adc	r17, r17
  c0:	22 1f       	adc	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	00 0f       	add	r16, r16
  c6:	11 1f       	adc	r17, r17
  c8:	22 1f       	adc	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	a9 01       	movw	r20, r18
  ce:	98 01       	movw	r18, r16
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	44 1f       	adc	r20, r20
  d6:	55 1f       	adc	r21, r21
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	44 1f       	adc	r20, r20
  de:	55 1f       	adc	r21, r21
  e0:	0e 94 44 03 	call	0x688	; 0x688 <__udivmodsi4>
  e4:	02 c0       	rjmp	.+4      	; 0xea <UART_SetBaudRate+0x7e>
  e6:	26 e0       	ldi	r18, 0x06	; 6
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	29 b9       	out	0x09, r18	; 9
  ec:	30 bd       	out	0x20, r19	; 32
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	08 95       	ret

000000f4 <UART_Init>:
  f4:	28 e1       	ldi	r18, 0x18	; 24
  f6:	2a b9       	out	0x0a, r18	; 10
  f8:	26 e8       	ldi	r18, 0x86	; 134
  fa:	20 bd       	out	0x20, r18	; 32
  fc:	1b b8       	out	0x0b, r1	; 11
  fe:	0e 94 36 00 	call	0x6c	; 0x6c <UART_SetBaudRate>
 102:	08 95       	ret

00000104 <UART_RxChar>:
 104:	5f 9b       	sbis	0x0b, 7	; 11
 106:	fe cf       	rjmp	.-4      	; 0x104 <UART_RxChar>
 108:	8c b1       	in	r24, 0x0c	; 12
 10a:	08 95       	ret

0000010c <binary>:
		
		
    }
}
void binary(int a ,int c ,int b[])
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	da 01       	movw	r26, r20
 112:	fa 01       	movw	r30, r20
 114:	3a 96       	adiw	r30, 0x0a	; 10
 116:	ea 01       	movw	r28, r20
 118:	22 96       	adiw	r28, 0x02	; 2
	
	
	for(int i=4;i>=1;i--)
	{
		b[0]=1;
 11a:	41 e0       	ldi	r20, 0x01	; 1
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	11 96       	adiw	r26, 0x01	; 1
 120:	5c 93       	st	X, r21
 122:	4e 93       	st	-X, r20
 124:	32 97       	sbiw	r30, 0x02	; 2
		b[i]=a%2;
 126:	9c 01       	movw	r18, r24
 128:	21 70       	andi	r18, 0x01	; 1
 12a:	30 78       	andi	r19, 0x80	; 128
 12c:	33 23       	and	r19, r19
 12e:	34 f4       	brge	.+12     	; 0x13c <binary+0x30>
 130:	21 50       	subi	r18, 0x01	; 1
 132:	31 09       	sbc	r19, r1
 134:	2e 6f       	ori	r18, 0xFE	; 254
 136:	3f 6f       	ori	r19, 0xFF	; 255
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	31 83       	std	Z+1, r19	; 0x01
 13e:	20 83       	st	Z, r18
		a=a/2;
 140:	9c 01       	movw	r18, r24
 142:	99 23       	and	r25, r25
 144:	14 f4       	brge	.+4      	; 0x14a <binary+0x3e>
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	c9 01       	movw	r24, r18
 14c:	95 95       	asr	r25
 14e:	87 95       	ror	r24
}
void binary(int a ,int c ,int b[])
{
	
	
	for(int i=4;i>=1;i--)
 150:	ec 17       	cp	r30, r28
 152:	fd 07       	cpc	r31, r29
 154:	21 f7       	brne	.-56     	; 0x11e <binary+0x12>
		a=a/2;
	}
	
	for(int i=7;i>=5;i--)
	{
		b[i]=c%2;
 156:	cb 01       	movw	r24, r22
 158:	81 70       	andi	r24, 0x01	; 1
 15a:	90 78       	andi	r25, 0x80	; 128
 15c:	99 23       	and	r25, r25
 15e:	24 f4       	brge	.+8      	; 0x168 <binary+0x5c>
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	8e 6f       	ori	r24, 0xFE	; 254
 164:	9f 6f       	ori	r25, 0xFF	; 255
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	1f 96       	adiw	r26, 0x0f	; 15
 16a:	9c 93       	st	X, r25
 16c:	8e 93       	st	-X, r24
 16e:	1e 97       	sbiw	r26, 0x0e	; 14
 170:	cb 01       	movw	r24, r22
 172:	77 23       	and	r23, r23
 174:	0c f4       	brge	.+2      	; 0x178 <binary+0x6c>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	95 95       	asr	r25
 17a:	87 95       	ror	r24
 17c:	81 70       	andi	r24, 0x01	; 1
 17e:	90 78       	andi	r25, 0x80	; 128
 180:	99 23       	and	r25, r25
 182:	24 f4       	brge	.+8      	; 0x18c <binary+0x80>
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	8e 6f       	ori	r24, 0xFE	; 254
 188:	9f 6f       	ori	r25, 0xFF	; 255
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	1d 96       	adiw	r26, 0x0d	; 13
 18e:	9c 93       	st	X, r25
 190:	8e 93       	st	-X, r24
 192:	1c 97       	sbiw	r26, 0x0c	; 12
 194:	cb 01       	movw	r24, r22
 196:	99 23       	and	r25, r25
 198:	0c f4       	brge	.+2      	; 0x19c <binary+0x90>
 19a:	03 96       	adiw	r24, 0x03	; 3
 19c:	95 95       	asr	r25
 19e:	87 95       	ror	r24
 1a0:	95 95       	asr	r25
 1a2:	87 95       	ror	r24
 1a4:	81 70       	andi	r24, 0x01	; 1
 1a6:	90 78       	andi	r25, 0x80	; 128
 1a8:	99 23       	and	r25, r25
 1aa:	24 f4       	brge	.+8      	; 0x1b4 <binary+0xa8>
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	8e 6f       	ori	r24, 0xFE	; 254
 1b0:	9f 6f       	ori	r25, 0xFF	; 255
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	1b 96       	adiw	r26, 0x0b	; 11
 1b6:	9c 93       	st	X, r25
 1b8:	8e 93       	st	-X, r24
 1ba:	1a 97       	sbiw	r26, 0x0a	; 10
		c=c/2;
	}
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <printit>:
void printit(int c[])
{
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	8c 01       	movw	r16, r24
	int columns= 8;
	int rows = 6;
	   DDRD=0xFF;
 1cc:	8f ef       	ldi	r24, 0xFF	; 255
 1ce:	81 bb       	out	0x11, r24	; 17
	   DDRB=0xFF;
 1d0:	87 bb       	out	0x17, r24	; 23
	   DDRC=0xff;
 1d2:	84 bb       	out	0x14, r24	; 20
	   DDRA=0xFF;
 1d4:	8a bb       	out	0x1a, r24	; 26
 1d6:	f8 01       	movw	r30, r16
 1d8:	d8 01       	movw	r26, r16
 1da:	1e 96       	adiw	r26, 0x0e	; 14
				 // y-move forward
				 for( j=0;j<56;j++) //449
				 {
					 
					 
					 PORTB = 0x01;
 1dc:	61 e0       	ldi	r22, 0x01	; 1
					 _delay_ms(tx);
					 PORTB = 0x04;
 1de:	54 e0       	ldi	r21, 0x04	; 4
					 _delay_ms(tx);
					 PORTB = 0x02;
 1e0:	42 e0       	ldi	r20, 0x02	; 2
					 _delay_ms(tx);
					 PORTB = 0x08;
 1e2:	98 e0       	ldi	r25, 0x08	; 8
			 

			 
			 if(z !=columns -1 )
			 {
				 if(c[z]==1)
 1e4:	21 91       	ld	r18, Z+
 1e6:	31 91       	ld	r19, Z+
 1e8:	21 30       	cpi	r18, 0x01	; 1
 1ea:	31 05       	cpc	r19, r1
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <printit+0x2e>
 1ee:	97 c0       	rjmp	.+302    	; 0x31e <printit+0x15c>
 1f0:	29 e1       	ldi	r18, 0x19	; 25
 1f2:	30 e0       	ldi	r19, 0x00	; 0
					 // PUNCHER IS AT THE TOP
					 for(int j=0;j<25;j++)
					 {
						 
						 
						 PORTA = 0x08;
 1f4:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	c6 e7       	ldi	r28, 0x76	; 118
 1f8:	d1 e0       	ldi	r29, 0x01	; 1
 1fa:	21 97       	sbiw	r28, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <printit+0x38>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <printit+0x3e>
 200:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x02;
 202:	4b bb       	out	0x1b, r20	; 27
 204:	c6 e7       	ldi	r28, 0x76	; 118
 206:	d1 e0       	ldi	r29, 0x01	; 1
 208:	21 97       	sbiw	r28, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <printit+0x46>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <printit+0x4c>
 20e:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x04;
 210:	5b bb       	out	0x1b, r21	; 27
 212:	c6 e7       	ldi	r28, 0x76	; 118
 214:	d1 e0       	ldi	r29, 0x01	; 1
 216:	21 97       	sbiw	r28, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <printit+0x54>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <printit+0x5a>
 21c:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x01;
 21e:	6b bb       	out	0x1b, r22	; 27
 220:	c6 e7       	ldi	r28, 0x76	; 118
 222:	d1 e0       	ldi	r29, 0x01	; 1
 224:	21 97       	sbiw	r28, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <printit+0x62>
 228:	00 c0       	rjmp	.+0      	; 0x22a <printit+0x68>
 22a:	00 00       	nop
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	31 09       	sbc	r19, r1
			 if(z !=columns -1 )
			 {
				 if(c[z]==1)
				 {
					 // PUNCHER IS AT THE TOP
					 for(int j=0;j<25;j++)
 230:	09 f7       	brne	.-62     	; 0x1f4 <printit+0x32>
 232:	cf e4       	ldi	r28, 0x4F	; 79
 234:	d3 ec       	ldi	r29, 0xC3	; 195
 236:	21 97       	sbiw	r28, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <printit+0x74>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <printit+0x7a>
 23c:	00 00       	nop
 23e:	26 e9       	ldi	r18, 0x96	; 150
 240:	30 e0       	ldi	r19, 0x00	; 0
					 
					 for(int j=0;j<150;j++)
					 {
						 
						 
						 PORTA = 0x01;
 242:	6b bb       	out	0x1b, r22	; 27
 244:	c6 e7       	ldi	r28, 0x76	; 118
 246:	d1 e0       	ldi	r29, 0x01	; 1
 248:	21 97       	sbiw	r28, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <printit+0x86>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <printit+0x8c>
 24e:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x04;
 250:	5b bb       	out	0x1b, r21	; 27
 252:	c6 e7       	ldi	r28, 0x76	; 118
 254:	d1 e0       	ldi	r29, 0x01	; 1
 256:	21 97       	sbiw	r28, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <printit+0x94>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <printit+0x9a>
 25c:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x02;
 25e:	4b bb       	out	0x1b, r20	; 27
 260:	c6 e7       	ldi	r28, 0x76	; 118
 262:	d1 e0       	ldi	r29, 0x01	; 1
 264:	21 97       	sbiw	r28, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <printit+0xa2>
 268:	00 c0       	rjmp	.+0      	; 0x26a <printit+0xa8>
 26a:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x08;
 26c:	9b bb       	out	0x1b, r25	; 27
 26e:	c6 e7       	ldi	r28, 0x76	; 118
 270:	d1 e0       	ldi	r29, 0x01	; 1
 272:	21 97       	sbiw	r28, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <printit+0xb0>
 276:	00 c0       	rjmp	.+0      	; 0x278 <printit+0xb6>
 278:	00 00       	nop
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	31 09       	sbc	r19, r1
					 }
					 _delay_ms(200);
					 
					 //puncher is rotating 360*3
					 
					 for(int j=0;j<150;j++)
 27e:	09 f7       	brne	.-62     	; 0x242 <printit+0x80>
 280:	cf e4       	ldi	r28, 0x4F	; 79
 282:	d3 ec       	ldi	r29, 0xC3	; 195
 284:	21 97       	sbiw	r28, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <printit+0xc2>
 288:	00 c0       	rjmp	.+0      	; 0x28a <printit+0xc8>
 28a:	00 00       	nop
 28c:	29 e1       	ldi	r18, 0x19	; 25
 28e:	30 e0       	ldi	r19, 0x00	; 0
					 _delay_ms(200);
					 for(int j=0;j<25;j++)
					 {
						 
						 
						 PORTA = 0x01;
 290:	6b bb       	out	0x1b, r22	; 27
 292:	c6 e7       	ldi	r28, 0x76	; 118
 294:	d1 e0       	ldi	r29, 0x01	; 1
 296:	21 97       	sbiw	r28, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <printit+0xd4>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <printit+0xda>
 29c:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x04;
 29e:	5b bb       	out	0x1b, r21	; 27
 2a0:	c6 e7       	ldi	r28, 0x76	; 118
 2a2:	d1 e0       	ldi	r29, 0x01	; 1
 2a4:	21 97       	sbiw	r28, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <printit+0xe2>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <printit+0xe8>
 2aa:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x02;
 2ac:	4b bb       	out	0x1b, r20	; 27
 2ae:	c6 e7       	ldi	r28, 0x76	; 118
 2b0:	d1 e0       	ldi	r29, 0x01	; 1
 2b2:	21 97       	sbiw	r28, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <printit+0xf0>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <printit+0xf6>
 2b8:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x08;
 2ba:	9b bb       	out	0x1b, r25	; 27
 2bc:	c6 e7       	ldi	r28, 0x76	; 118
 2be:	d1 e0       	ldi	r29, 0x01	; 1
 2c0:	21 97       	sbiw	r28, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <printit+0xfe>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <printit+0x104>
 2c6:	00 00       	nop
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	31 09       	sbc	r19, r1
						 _delay_ms(tz);
						 PORTA = 0x08;
						 _delay_ms(tz);
					 }
					 _delay_ms(200);
					 for(int j=0;j<25;j++)
 2cc:	09 f7       	brne	.-62     	; 0x290 <printit+0xce>
 2ce:	cf e4       	ldi	r28, 0x4F	; 79
 2d0:	d3 ec       	ldi	r29, 0xC3	; 195
 2d2:	21 97       	sbiw	r28, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <printit+0x110>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <printit+0x116>
 2d8:	00 00       	nop
 2da:	28 e3       	ldi	r18, 0x38	; 56
 2dc:	30 e0       	ldi	r19, 0x00	; 0
					 //y -move forward
					 for( j=0;j<56;j++) //449
					 {
						 
						 
						 PORTB = 0x01;
 2de:	68 bb       	out	0x18, r22	; 24
 2e0:	c6 e7       	ldi	r28, 0x76	; 118
 2e2:	d1 e0       	ldi	r29, 0x01	; 1
 2e4:	21 97       	sbiw	r28, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <printit+0x122>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <printit+0x128>
 2ea:	00 00       	nop
						 _delay_ms(tx);
						 PORTB = 0x04;
 2ec:	58 bb       	out	0x18, r21	; 24
 2ee:	c6 e7       	ldi	r28, 0x76	; 118
 2f0:	d1 e0       	ldi	r29, 0x01	; 1
 2f2:	21 97       	sbiw	r28, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <printit+0x130>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <printit+0x136>
 2f8:	00 00       	nop
						 _delay_ms(tx);
						 PORTB = 0x02;
 2fa:	48 bb       	out	0x18, r20	; 24
 2fc:	c6 e7       	ldi	r28, 0x76	; 118
 2fe:	d1 e0       	ldi	r29, 0x01	; 1
 300:	21 97       	sbiw	r28, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <printit+0x13e>
 304:	00 c0       	rjmp	.+0      	; 0x306 <printit+0x144>
 306:	00 00       	nop
						 _delay_ms(tx);
						 PORTB = 0x08;
 308:	98 bb       	out	0x18, r25	; 24
 30a:	c6 e7       	ldi	r28, 0x76	; 118
 30c:	d1 e0       	ldi	r29, 0x01	; 1
 30e:	21 97       	sbiw	r28, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <printit+0x14c>
 312:	00 c0       	rjmp	.+0      	; 0x314 <printit+0x152>
 314:	00 00       	nop
 316:	21 50       	subi	r18, 0x01	; 1
 318:	31 09       	sbc	r19, r1
					 }
					 _delay_ms(200);
					 
					 
					 //y -move forward
					 for( j=0;j<56;j++) //449
 31a:	09 f7       	brne	.-62     	; 0x2de <printit+0x11c>
 31c:	fd c0       	rjmp	.+506    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
 31e:	28 e3       	ldi	r18, 0x38	; 56
 320:	30 e0       	ldi	r19, 0x00	; 0
				 // y-move forward
				 for( j=0;j<56;j++) //449
				 {
					 
					 
					 PORTB = 0x01;
 322:	68 bb       	out	0x18, r22	; 24
 324:	c6 e7       	ldi	r28, 0x76	; 118
 326:	d1 e0       	ldi	r29, 0x01	; 1
 328:	21 97       	sbiw	r28, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <printit+0x166>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <printit+0x16c>
 32e:	00 00       	nop
					 _delay_ms(tx);
					 PORTB = 0x04;
 330:	58 bb       	out	0x18, r21	; 24
 332:	c6 e7       	ldi	r28, 0x76	; 118
 334:	d1 e0       	ldi	r29, 0x01	; 1
 336:	21 97       	sbiw	r28, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <printit+0x174>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <printit+0x17a>
 33c:	00 00       	nop
					 _delay_ms(tx);
					 PORTB = 0x02;
 33e:	48 bb       	out	0x18, r20	; 24
 340:	c6 e7       	ldi	r28, 0x76	; 118
 342:	d1 e0       	ldi	r29, 0x01	; 1
 344:	21 97       	sbiw	r28, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <printit+0x182>
 348:	00 c0       	rjmp	.+0      	; 0x34a <printit+0x188>
 34a:	00 00       	nop
					 _delay_ms(tx);
					 PORTB = 0x08;
 34c:	98 bb       	out	0x18, r25	; 24
 34e:	c6 e7       	ldi	r28, 0x76	; 118
 350:	d1 e0       	ldi	r29, 0x01	; 1
 352:	21 97       	sbiw	r28, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <printit+0x190>
 356:	00 c0       	rjmp	.+0      	; 0x358 <printit+0x196>
 358:	00 00       	nop
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	31 09       	sbc	r19, r1
					 }
					 
					 
				 }else
				 // y-move forward
				 for( j=0;j<56;j++) //449
 35e:	09 f7       	brne	.-62     	; 0x322 <printit+0x160>
 360:	db c0       	rjmp	.+438    	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
				 
			 }else
			 {
				 //puncher is at the end of the row
				 
				 if(c[z] ==1)
 362:	f8 01       	movw	r30, r16
 364:	86 85       	ldd	r24, Z+14	; 0x0e
 366:	97 85       	ldd	r25, Z+15	; 0x0f
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	09 f0       	breq	.+2      	; 0x36e <printit+0x1ac>
 36c:	cc c0       	rjmp	.+408    	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
 36e:	89 e1       	ldi	r24, 0x19	; 25
 370:	90 e0       	ldi	r25, 0x00	; 0
					 //puncher
					 for(int j=0;j<25;j++) // down
					 {
						 
						 
						 PORTA = 0x08;
 372:	58 e0       	ldi	r21, 0x08	; 8
						 _delay_ms(tz);
						 PORTA = 0x02;
 374:	42 e0       	ldi	r20, 0x02	; 2
						 _delay_ms(tz);
						 PORTA = 0x04;
 376:	34 e0       	ldi	r19, 0x04	; 4
						 _delay_ms(tz);
						 PORTA = 0x01;
 378:	21 e0       	ldi	r18, 0x01	; 1
					 //puncher
					 for(int j=0;j<25;j++) // down
					 {
						 
						 
						 PORTA = 0x08;
 37a:	5b bb       	out	0x1b, r21	; 27
 37c:	c6 e7       	ldi	r28, 0x76	; 118
 37e:	d1 e0       	ldi	r29, 0x01	; 1
 380:	21 97       	sbiw	r28, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <printit+0x1be>
 384:	00 c0       	rjmp	.+0      	; 0x386 <printit+0x1c4>
 386:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x02;
 388:	4b bb       	out	0x1b, r20	; 27
 38a:	e6 e7       	ldi	r30, 0x76	; 118
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <printit+0x1cc>
 392:	00 c0       	rjmp	.+0      	; 0x394 <printit+0x1d2>
 394:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x04;
 396:	3b bb       	out	0x1b, r19	; 27
 398:	c6 e7       	ldi	r28, 0x76	; 118
 39a:	d1 e0       	ldi	r29, 0x01	; 1
 39c:	21 97       	sbiw	r28, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <printit+0x1da>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <printit+0x1e0>
 3a2:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x01;
 3a4:	2b bb       	out	0x1b, r18	; 27
 3a6:	e6 e7       	ldi	r30, 0x76	; 118
 3a8:	f1 e0       	ldi	r31, 0x01	; 1
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <printit+0x1e8>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <printit+0x1ee>
 3b0:	00 00       	nop
 3b2:	01 97       	sbiw	r24, 0x01	; 1
				 
				 if(c[z] ==1)
				 {
					 //Giving only one punch
					 //puncher
					 for(int j=0;j<25;j++) // down
 3b4:	11 f7       	brne	.-60     	; 0x37a <printit+0x1b8>
 3b6:	8f e4       	ldi	r24, 0x4F	; 79
 3b8:	93 ec       	ldi	r25, 0xC3	; 195
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <printit+0x1f8>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <printit+0x1fe>
 3c0:	00 00       	nop
 3c2:	86 e9       	ldi	r24, 0x96	; 150
 3c4:	90 e0       	ldi	r25, 0x00	; 0
					 _delay_ms(200);
					 for(int j=0;j<150;j++)
					 {
						 
						 
						 PORTA = 0x01;
 3c6:	51 e0       	ldi	r21, 0x01	; 1
						 _delay_ms(tz);
						 PORTA = 0x04;
 3c8:	44 e0       	ldi	r20, 0x04	; 4
						 _delay_ms(tz);
						 PORTA = 0x02;
 3ca:	32 e0       	ldi	r19, 0x02	; 2
						 _delay_ms(tz);
						 PORTA = 0x08;
 3cc:	28 e0       	ldi	r18, 0x08	; 8
					 _delay_ms(200);
					 for(int j=0;j<150;j++)
					 {
						 
						 
						 PORTA = 0x01;
 3ce:	5b bb       	out	0x1b, r21	; 27
 3d0:	c6 e7       	ldi	r28, 0x76	; 118
 3d2:	d1 e0       	ldi	r29, 0x01	; 1
 3d4:	21 97       	sbiw	r28, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <printit+0x212>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <printit+0x218>
 3da:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x04;
 3dc:	4b bb       	out	0x1b, r20	; 27
 3de:	e6 e7       	ldi	r30, 0x76	; 118
 3e0:	f1 e0       	ldi	r31, 0x01	; 1
 3e2:	31 97       	sbiw	r30, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <printit+0x220>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <printit+0x226>
 3e8:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x02;
 3ea:	3b bb       	out	0x1b, r19	; 27
 3ec:	c6 e7       	ldi	r28, 0x76	; 118
 3ee:	d1 e0       	ldi	r29, 0x01	; 1
 3f0:	21 97       	sbiw	r28, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <printit+0x22e>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <printit+0x234>
 3f6:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x08;
 3f8:	2b bb       	out	0x1b, r18	; 27
 3fa:	e6 e7       	ldi	r30, 0x76	; 118
 3fc:	f1 e0       	ldi	r31, 0x01	; 1
 3fe:	31 97       	sbiw	r30, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <printit+0x23c>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
 406:	01 97       	sbiw	r24, 0x01	; 1
						 _delay_ms(tz);
						 PORTA = 0x01;
						 _delay_ms(tz);
					 }
					 _delay_ms(200);
					 for(int j=0;j<150;j++)
 408:	11 f7       	brne	.-60     	; 0x3ce <printit+0x20c>
 40a:	8f e4       	ldi	r24, 0x4F	; 79
 40c:	93 ec       	ldi	r25, 0xC3	; 195
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	00 00       	nop
 416:	89 e1       	ldi	r24, 0x19	; 25
 418:	90 e0       	ldi	r25, 0x00	; 0
					 _delay_ms(200);
					 for(int j=0;j<25;j++) //up
					 {
						 
						 
						 PORTA = 0x01;
 41a:	51 e0       	ldi	r21, 0x01	; 1
						 _delay_ms(tz);
						 PORTA = 0x04;
 41c:	44 e0       	ldi	r20, 0x04	; 4
						 _delay_ms(tz);
						 PORTA = 0x02;
 41e:	32 e0       	ldi	r19, 0x02	; 2
						 _delay_ms(tz);
						 PORTA = 0x08;
 420:	28 e0       	ldi	r18, 0x08	; 8
					 _delay_ms(200);
					 for(int j=0;j<25;j++) //up
					 {
						 
						 
						 PORTA = 0x01;
 422:	5b bb       	out	0x1b, r21	; 27
 424:	c6 e7       	ldi	r28, 0x76	; 118
 426:	d1 e0       	ldi	r29, 0x01	; 1
 428:	21 97       	sbiw	r28, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x04;
 430:	4b bb       	out	0x1b, r20	; 27
 432:	e6 e7       	ldi	r30, 0x76	; 118
 434:	f1 e0       	ldi	r31, 0x01	; 1
 436:	31 97       	sbiw	r30, 0x01	; 1
 438:	f1 f7       	brne	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x02;
 43e:	3b bb       	out	0x1b, r19	; 27
 440:	c6 e7       	ldi	r28, 0x76	; 118
 442:	d1 e0       	ldi	r29, 0x01	; 1
 444:	21 97       	sbiw	r28, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 44a:	00 00       	nop
						 _delay_ms(tz);
						 PORTA = 0x08;
 44c:	2b bb       	out	0x1b, r18	; 27
 44e:	e6 e7       	ldi	r30, 0x76	; 118
 450:	f1 e0       	ldi	r31, 0x01	; 1
 452:	31 97       	sbiw	r30, 0x01	; 1
 454:	f1 f7       	brne	.-4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 458:	00 00       	nop
 45a:	01 97       	sbiw	r24, 0x01	; 1
						 _delay_ms(tz);
						 PORTA = 0x08;
						 _delay_ms(tz);
					 }
					 _delay_ms(200);
					 for(int j=0;j<25;j++) //up
 45c:	11 f7       	brne	.-60     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 45e:	8f e4       	ldi	r24, 0x4F	; 79
 460:	93 ec       	ldi	r25, 0xC3	; 195
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	f1 f7       	brne	.-4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 468:	00 00       	nop
 46a:	87 e0       	ldi	r24, 0x07	; 7
 46c:	90 e0       	ldi	r25, 0x00	; 0
					 for(y=0; y<columns-1 ;y++) //y moves backwards
					 {
						 
						 for( i= 0; i<56 ;i++)
						 {
							 PORTB = 0x08;
 46e:	78 e0       	ldi	r23, 0x08	; 8
							 _delay_ms(tx);
							 PORTB = 0x02;
 470:	62 e0       	ldi	r22, 0x02	; 2
							 _delay_ms(tx);
							 PORTB = 0x04;
 472:	54 e0       	ldi	r21, 0x04	; 4
							 _delay_ms(tx);
							 PORTB = 0x01;
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	22 c0       	rjmp	.+68     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
					 for(y=0; y<columns-1 ;y++) //y moves backwards
					 {
						 
						 for( i= 0; i<56 ;i++)
						 {
							 PORTB = 0x08;
 478:	78 bb       	out	0x18, r23	; 24
 47a:	c6 e7       	ldi	r28, 0x76	; 118
 47c:	d1 e0       	ldi	r29, 0x01	; 1
 47e:	21 97       	sbiw	r28, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 482:	00 c0       	rjmp	.+0      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 484:	00 00       	nop
							 _delay_ms(tx);
							 PORTB = 0x02;
 486:	68 bb       	out	0x18, r22	; 24
 488:	e6 e7       	ldi	r30, 0x76	; 118
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	31 97       	sbiw	r30, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 492:	00 00       	nop
							 _delay_ms(tx);
							 PORTB = 0x04;
 494:	58 bb       	out	0x18, r21	; 24
 496:	c6 e7       	ldi	r28, 0x76	; 118
 498:	d1 e0       	ldi	r29, 0x01	; 1
 49a:	21 97       	sbiw	r28, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 4a0:	00 00       	nop
							 _delay_ms(tx);
							 PORTB = 0x01;
 4a2:	48 bb       	out	0x18, r20	; 24
 4a4:	e6 e7       	ldi	r30, 0x76	; 118
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	31 97       	sbiw	r30, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4ae:	00 00       	nop
 4b0:	21 50       	subi	r18, 0x01	; 1
 4b2:	31 09       	sbc	r19, r1
					 
					 // coming back to the starting point
					 for(y=0; y<columns-1 ;y++) //y moves backwards
					 {
						 
						 for( i= 0; i<56 ;i++)
 4b4:	09 f7       	brne	.-62     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 4b6:	01 97       	sbiw	r24, 0x01	; 1
					 }
					 _delay_ms(200);

					 
					 // coming back to the starting point
					 for(y=0; y<columns-1 ;y++) //y moves backwards
 4b8:	09 f4       	brne	.+2      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4ba:	52 c0       	rjmp	.+164    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 4bc:	28 e3       	ldi	r18, 0x38	; 56
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	db cf       	rjmp	.-74     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
					 
					 for(y=0; y<columns -1;y++) //y moves backwards
					 {
						 for( i= 0; i<56 ;i++)
						 {
							 PORTB = 0x08;
 4c2:	78 bb       	out	0x18, r23	; 24
 4c4:	c6 e7       	ldi	r28, 0x76	; 118
 4c6:	d1 e0       	ldi	r29, 0x01	; 1
 4c8:	21 97       	sbiw	r28, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4ce:	00 00       	nop
							 _delay_ms(tx);
							 PORTB = 0x02;
 4d0:	68 bb       	out	0x18, r22	; 24
 4d2:	e6 e7       	ldi	r30, 0x76	; 118
 4d4:	f1 e0       	ldi	r31, 0x01	; 1
 4d6:	31 97       	sbiw	r30, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4dc:	00 00       	nop
							 _delay_ms(tx);
							 PORTB = 0x04;
 4de:	58 bb       	out	0x18, r21	; 24
 4e0:	c6 e7       	ldi	r28, 0x76	; 118
 4e2:	d1 e0       	ldi	r29, 0x01	; 1
 4e4:	21 97       	sbiw	r28, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
 4ea:	00 00       	nop
							 _delay_ms(tx);
							 PORTB = 0x01;
 4ec:	48 bb       	out	0x18, r20	; 24
 4ee:	e6 e7       	ldi	r30, 0x76	; 118
 4f0:	f1 e0       	ldi	r31, 0x01	; 1
 4f2:	31 97       	sbiw	r30, 0x01	; 1
 4f4:	f1 f7       	brne	.-4      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4f8:	00 00       	nop
 4fa:	21 50       	subi	r18, 0x01	; 1
 4fc:	31 09       	sbc	r19, r1
				 else
				 {
					 
					 for(y=0; y<columns -1;y++) //y moves backwards
					 {
						 for( i= 0; i<56 ;i++)
 4fe:	09 f7       	brne	.-62     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 500:	01 97       	sbiw	r24, 0x01	; 1
					 }
				 }
				 else
				 {
					 
					 for(y=0; y<columns -1;y++) //y moves backwards
 502:	39 f4       	brne	.+14     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 504:	2d c0       	rjmp	.+90     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 506:	87 e0       	ldi	r24, 0x07	; 7
 508:	90 e0       	ldi	r25, 0x00	; 0
					 {
						 for( i= 0; i<56 ;i++)
						 {
							 PORTB = 0x08;
 50a:	78 e0       	ldi	r23, 0x08	; 8
							 _delay_ms(tx);
							 PORTB = 0x02;
 50c:	62 e0       	ldi	r22, 0x02	; 2
							 _delay_ms(tx);
							 PORTB = 0x04;
 50e:	54 e0       	ldi	r21, 0x04	; 4
							 _delay_ms(tx);
							 PORTB = 0x01;
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	28 e3       	ldi	r18, 0x38	; 56
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	d5 cf       	rjmp	.-86     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
		 for( z=0 ; z<columns ;z++) // y axis moves bit by bit
		 {
			 

			 
			 if(z !=columns -1 )
 518:	ea 17       	cp	r30, r26
 51a:	fb 07       	cpc	r31, r27
 51c:	09 f0       	breq	.+2      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 51e:	62 ce       	rjmp	.-828    	; 0x1e4 <printit+0x22>
 520:	20 cf       	rjmp	.-448    	; 0x362 <printit+0x1a0>

		 //x axis moves forward
		 for(z=0 ;z<56;z++)
		 {
			 
			 PORTD = 0x80;
 522:	52 bb       	out	0x12, r21	; 18
 524:	c6 e7       	ldi	r28, 0x76	; 118
 526:	d1 e0       	ldi	r29, 0x01	; 1
 528:	21 97       	sbiw	r28, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
 52e:	00 00       	nop
			 _delay_ms(tx);
			 PORTD = 0x20;
 530:	42 bb       	out	0x12, r20	; 18
 532:	e6 e7       	ldi	r30, 0x76	; 118
 534:	f1 e0       	ldi	r31, 0x01	; 1
 536:	31 97       	sbiw	r30, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 53c:	00 00       	nop
			 _delay_ms(tx);
			 PORTD = 0x40;
 53e:	32 bb       	out	0x12, r19	; 18
 540:	c6 e7       	ldi	r28, 0x76	; 118
 542:	d1 e0       	ldi	r29, 0x01	; 1
 544:	21 97       	sbiw	r28, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 548:	00 c0       	rjmp	.+0      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
 54a:	00 00       	nop
			 _delay_ms(tx);
			 PORTD = 0x10;
 54c:	22 bb       	out	0x12, r18	; 18
 54e:	e6 e7       	ldi	r30, 0x76	; 118
 550:	f1 e0       	ldi	r31, 0x01	; 1
 552:	31 97       	sbiw	r30, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 556:	00 c0       	rjmp	.+0      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 558:	00 00       	nop
 55a:	01 97       	sbiw	r24, 0x01	; 1
				 }
			 }
		 }

		 //x axis moves forward
		 for(z=0 ;z<56;z++)
 55c:	11 f7       	brne	.-60     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
 55e:	07 c0       	rjmp	.+14     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 560:	88 e3       	ldi	r24, 0x38	; 56
 562:	90 e0       	ldi	r25, 0x00	; 0
		 {
			 
			 PORTD = 0x80;
 564:	50 e8       	ldi	r21, 0x80	; 128
			 _delay_ms(tx);
			 PORTD = 0x20;
 566:	40 e2       	ldi	r20, 0x20	; 32
			 _delay_ms(tx);
			 PORTD = 0x40;
 568:	30 e4       	ldi	r19, 0x40	; 64
			 _delay_ms(tx);
			 PORTD = 0x10;
 56a:	20 e1       	ldi	r18, 0x10	; 16
 56c:	da cf       	rjmp	.-76     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			 _delay_ms(tx);
			 
		 }	
}
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	1f 91       	pop	r17
 574:	0f 91       	pop	r16
 576:	08 95       	ret

00000578 <come>:
void come()
{
 578:	65 e0       	ldi	r22, 0x05	; 5
 57a:	70 e0       	ldi	r23, 0x00	; 0
	for(j=0 ; j<5;j++)
	{
		for(z=0 ;z<56;z++)
		{
			
			PORTD = 0x10;
 57c:	50 e1       	ldi	r21, 0x10	; 16
			_delay_ms(tx);
			PORTD = 0x40;
 57e:	40 e4       	ldi	r20, 0x40	; 64
			_delay_ms(tx);
			PORTD = 0x20;
 580:	30 e2       	ldi	r19, 0x20	; 32
			_delay_ms(tx);
			PORTD = 0x80;
 582:	20 e8       	ldi	r18, 0x80	; 128
 584:	21 c0       	rjmp	.+66     	; 0x5c8 <come+0x50>
	for(j=0 ; j<5;j++)
	{
		for(z=0 ;z<56;z++)
		{
			
			PORTD = 0x10;
 586:	52 bb       	out	0x12, r21	; 18
 588:	e6 e7       	ldi	r30, 0x76	; 118
 58a:	f1 e0       	ldi	r31, 0x01	; 1
 58c:	31 97       	sbiw	r30, 0x01	; 1
 58e:	f1 f7       	brne	.-4      	; 0x58c <come+0x14>
 590:	00 c0       	rjmp	.+0      	; 0x592 <come+0x1a>
 592:	00 00       	nop
			_delay_ms(tx);
			PORTD = 0x40;
 594:	42 bb       	out	0x12, r20	; 18
 596:	e6 e7       	ldi	r30, 0x76	; 118
 598:	f1 e0       	ldi	r31, 0x01	; 1
 59a:	31 97       	sbiw	r30, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <come+0x22>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <come+0x28>
 5a0:	00 00       	nop
			_delay_ms(tx);
			PORTD = 0x20;
 5a2:	32 bb       	out	0x12, r19	; 18
 5a4:	e6 e7       	ldi	r30, 0x76	; 118
 5a6:	f1 e0       	ldi	r31, 0x01	; 1
 5a8:	31 97       	sbiw	r30, 0x01	; 1
 5aa:	f1 f7       	brne	.-4      	; 0x5a8 <come+0x30>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <come+0x36>
 5ae:	00 00       	nop
			_delay_ms(tx);
			PORTD = 0x80;
 5b0:	22 bb       	out	0x12, r18	; 18
 5b2:	e6 e7       	ldi	r30, 0x76	; 118
 5b4:	f1 e0       	ldi	r31, 0x01	; 1
 5b6:	31 97       	sbiw	r30, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <come+0x3e>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <come+0x44>
 5bc:	00 00       	nop
 5be:	01 97       	sbiw	r24, 0x01	; 1
{
	float tx=1.5;
	int j ,z;
	for(j=0 ; j<5;j++)
	{
		for(z=0 ;z<56;z++)
 5c0:	11 f7       	brne	.-60     	; 0x586 <come+0xe>
 5c2:	61 50       	subi	r22, 0x01	; 1
 5c4:	71 09       	sbc	r23, r1
}
void come()
{
	float tx=1.5;
	int j ,z;
	for(j=0 ; j<5;j++)
 5c6:	19 f0       	breq	.+6      	; 0x5ce <come+0x56>
			 _delay_ms(tx);
			 
		 }	
}
void come()
{
 5c8:	88 e3       	ldi	r24, 0x38	; 56
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	dc cf       	rjmp	.-72     	; 0x586 <come+0xe>
 5ce:	08 95       	ret

000005d0 <main>:
void binary(int a ,int c ,int b[]);
void printit(int c[]);
void come();

int main(void)
{
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
 5d8:	c2 54       	subi	r28, 0x42	; 66
 5da:	d1 09       	sbc	r29, r1
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	de bf       	out	0x3e, r29	; 62
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	cd bf       	out	0x3d, r28	; 61
	
	char data[50];
	int print[8];
	
	
	UART_Init(2400);// uart initialize
 5e6:	60 e6       	ldi	r22, 0x60	; 96
 5e8:	79 e0       	ldi	r23, 0x09	; 9
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 7a 00 	call	0xf4	; 0xf4 <UART_Init>
 5f2:	6e 01       	movw	r12, r28
 5f4:	85 e1       	ldi	r24, 0x15	; 21
 5f6:	c8 0e       	add	r12, r24
 5f8:	d1 1c       	adc	r13, r1
 5fa:	fe 01       	movw	r30, r28
 5fc:	31 96       	adiw	r30, 0x01	; 1
 5fe:	7f 01       	movw	r14, r30
void binary(int a ,int c ,int b[]);
void printit(int c[]);
void come();

int main(void)
{
 600:	8f 01       	movw	r16, r30
    while (1) 
    {
		for(int i=0;i<20;i++)
		{
			
			data[i]=UART_RxChar();
 602:	0e 94 82 00 	call	0x104	; 0x104 <UART_RxChar>
 606:	f8 01       	movw	r30, r16
 608:	81 93       	st	Z+, r24
 60a:	8f 01       	movw	r16, r30
	
	UART_Init(2400);// uart initialize
	
    while (1) 
    {
		for(int i=0;i<20;i++)
 60c:	ce 16       	cp	r12, r30
 60e:	df 06       	cpc	r13, r31
 610:	c1 f7       	brne	.-16     	; 0x602 <main+0x32>
			 x=a[0]*10+a[1];
			 z=b[0]*10+b[1];
			
		
			
			binary(x,z,print);
 612:	f7 01       	movw	r30, r14
 614:	82 81       	ldd	r24, Z+2	; 0x02
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	c0 97       	sbiw	r24, 0x30	; 48
 61a:	bc 01       	movw	r22, r24
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	88 0f       	add	r24, r24
 62a:	99 1f       	adc	r25, r25
 62c:	86 0f       	add	r24, r22
 62e:	97 1f       	adc	r25, r23
 630:	63 81       	ldd	r22, Z+3	; 0x03
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	60 53       	subi	r22, 0x30	; 48
 636:	71 09       	sbc	r23, r1
 638:	68 0f       	add	r22, r24
 63a:	79 1f       	adc	r23, r25
 63c:	20 81       	ld	r18, Z
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	20 53       	subi	r18, 0x30	; 48
 642:	31 09       	sbc	r19, r1
 644:	c9 01       	movw	r24, r18
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	22 0f       	add	r18, r18
 64c:	33 1f       	adc	r19, r19
 64e:	22 0f       	add	r18, r18
 650:	33 1f       	adc	r19, r19
 652:	22 0f       	add	r18, r18
 654:	33 1f       	adc	r19, r19
 656:	28 0f       	add	r18, r24
 658:	39 1f       	adc	r19, r25
 65a:	81 81       	ldd	r24, Z+1	; 0x01
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	c0 97       	sbiw	r24, 0x30	; 48
 660:	ae 01       	movw	r20, r28
 662:	4d 5c       	subi	r20, 0xCD	; 205
 664:	5f 4f       	sbci	r21, 0xFF	; 255
 666:	82 0f       	add	r24, r18
 668:	93 1f       	adc	r25, r19
 66a:	0e 94 86 00 	call	0x10c	; 0x10c <binary>
			
			
			printit(print);
 66e:	ce 01       	movw	r24, r28
 670:	c3 96       	adiw	r24, 0x33	; 51
 672:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <printit>
 676:	f4 e0       	ldi	r31, 0x04	; 4
 678:	ef 0e       	add	r14, r31
 67a:	f1 1c       	adc	r15, r1
		{
			
			data[i]=UART_RxChar();
		}
		
		for(int i=0;i<=16;i+=4)
 67c:	ec 14       	cp	r14, r12
 67e:	fd 04       	cpc	r15, r13
 680:	41 f6       	brne	.-112    	; 0x612 <main+0x42>
			
			
			printit(print);
			
		}
		come();
 682:	0e 94 bc 02 	call	0x578	; 0x578 <come>
		
		

		
		
    }
 686:	b9 cf       	rjmp	.-142    	; 0x5fa <main+0x2a>

00000688 <__udivmodsi4>:
 688:	a1 e2       	ldi	r26, 0x21	; 33
 68a:	1a 2e       	mov	r1, r26
 68c:	aa 1b       	sub	r26, r26
 68e:	bb 1b       	sub	r27, r27
 690:	fd 01       	movw	r30, r26
 692:	0d c0       	rjmp	.+26     	; 0x6ae <__udivmodsi4_ep>

00000694 <__udivmodsi4_loop>:
 694:	aa 1f       	adc	r26, r26
 696:	bb 1f       	adc	r27, r27
 698:	ee 1f       	adc	r30, r30
 69a:	ff 1f       	adc	r31, r31
 69c:	a2 17       	cp	r26, r18
 69e:	b3 07       	cpc	r27, r19
 6a0:	e4 07       	cpc	r30, r20
 6a2:	f5 07       	cpc	r31, r21
 6a4:	20 f0       	brcs	.+8      	; 0x6ae <__udivmodsi4_ep>
 6a6:	a2 1b       	sub	r26, r18
 6a8:	b3 0b       	sbc	r27, r19
 6aa:	e4 0b       	sbc	r30, r20
 6ac:	f5 0b       	sbc	r31, r21

000006ae <__udivmodsi4_ep>:
 6ae:	66 1f       	adc	r22, r22
 6b0:	77 1f       	adc	r23, r23
 6b2:	88 1f       	adc	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	1a 94       	dec	r1
 6b8:	69 f7       	brne	.-38     	; 0x694 <__udivmodsi4_loop>
 6ba:	60 95       	com	r22
 6bc:	70 95       	com	r23
 6be:	80 95       	com	r24
 6c0:	90 95       	com	r25
 6c2:	9b 01       	movw	r18, r22
 6c4:	ac 01       	movw	r20, r24
 6c6:	bd 01       	movw	r22, r26
 6c8:	cf 01       	movw	r24, r30
 6ca:	08 95       	ret

000006cc <_exit>:
 6cc:	f8 94       	cli

000006ce <__stop_program>:
 6ce:	ff cf       	rjmp	.-2      	; 0x6ce <__stop_program>
